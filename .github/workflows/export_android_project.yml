name: Android Build tester

on:
  push:
    branches:
    - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup Godot working directory
      run: |
        mkdir godot

    - name: Downloading templates 
      run: |
        wget -nv https://downloads.tuxfamily.org/godotengine/3.2.2/Godot_v3.2.2-stable_export_templates.tpz -O godot/godot_templates.tpz


    - name: Install Android Build Template
      run: |
        unzip godot/godot_templates.tpz
        wget -nv https://github.com/Poing-Studios/Godot-AdMob-Android-iOS/releases/download/Android_v3.2.2%2B/android-template-v3.2.2.zip
        mkdir example/android
        mkdir example/android/plugins
        mkdir example/android/build
        echo "3.2.2.stable" >> example/android/.build_version
        unzip android-template-v3.2.2.zip -d example/android/plugins
        unzip templates/android_source.zip -d example/android/build
        


    - uses: croconut/godot-multi-builder@v1
      id: builds
      with:
      #comma separated export presets
        names: "Android"
        # if path is in the top level of your directory, skip
        path-to-game: "example"
        # defaults to true, Android currently only exports to debug
        debug-mode: "true"


    - name: Verify .apk
      run: |
        cd example
        ls
        cd builds
        ls
    # because we set the id, we can access the output with:
    # ${{ steps.build_package.outputs.builds }}
    # but we'll just upload the .zip file directly as our artifact
    - uses: actions/upload-artifact@v1
      with:
        name: APK
        path: example/builds/builds.zip
    # now another job would be able to access the my-builds artifact
    # and do something with it
